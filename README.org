* DONE Quick Start
** Install Docker
   1. See installation instructions for [[https://docs.docker.com/installation/mac/][Mac]], [[https://docs.docker.com/installation/windows/][Windows]], [[https://docs.docker.com/installation/][etc]]
   2. On Mac and Windows, launch "Docker Quickstart Terminal".  All subsequent commands will be run in the terminal launched by "Docker Quickstart Terminal".
   *Notes:* On other operating systems, the docker daemon may run automatically after installation.  Also, on other operating systems, you may need to use the command ~sudo docker~ instead of just ~docker~.
** Get OrthoMCL Image 
   Within the Docker terminal run ~docker pull granek/orthomcl~ to download orthomcl image.
** Download Run Script
   Download the run script [run_orthomcl.sh](https://raw.githubusercontent.com/granek/OrthoMCL-docker/master/run_orthomcl.sh).
** Run the script
   Within the Docker terminal run ~bash run_orthomcl.sh~ to launch the OrthoMCL container.
   You should now have a bash shell in the OrthoMCL container that looks something like this:

#+BEGIN_SRC sh
root@a74d15695ca9:/#
#+END_SRC
   
* OrthoMCL Docker Details
** One-time Use
   Download the run script [run_orthomcl_oneshot.sh](https://raw.githubusercontent.com/granek/OrthoMCL-docker/master/run_orthomcl_oneshot.sh). Run this script within the Docker terminal run ~bash run_orthomcl_oneshot.sh~ to launch the OrthoMCL container.  This script cleans up after itself, which means that your session is completely obliterated once you exit. If you might want to resume your session, [[Multi-time Use]] below.
** Multi-time Use
If you exit your OrthoMCL session by typing ~exit~ at the command line, you can start a new session on the same container
#+BEGIN_SRC sh
docker start orthomcl-run
docker exec -ti orthomcl-run bash
#+END_SRC

This is roughly equivalent to logging back into a server by ssh, after logging out.
Once you are completely done with OrthoMCL, you might want to get rid of the containers:
#+BEGIN_SRC sh
docker stop orthomcl-mysql
docker rm orthomcl-run orthomcl-mysql
#+END_SRC
** Accessing files on the host computer
A Docker container is almost completely isolated from the host computer that it is running on.  This prevents the container from doing nasty things to your computer, but also makes it a bit more difficult to interact with files that are residing on your computer.  A simple way around this limitation is to mount a directory from the host computer into the Docker container.  When you run ~bash run_orthomcl.sh~, the directory that you run it from (the "working directory") will automatically be mounted within the OrthoMCL container at the mountpoint ~/host_dir~.  This means that you can read and write files that are in that directory.  Try the following within your OrthoMCL container:
#+BEGIN_SRC sh
ls /host_dir
echo "I am writing this from the future ... a docker container" > /host_dir/test_output.txt
#+END_SRC

If you want to mount a different directory, just supply this as a full path when you run the orthomcl script ~bash run_orthomcl.sh FULL_PATH_TO_DATA~, and that directory will be mounted at ~/host_dir~ instead
** Doing a local build of the OrthoMCL image
If you want to build the OrthoMCL image instead of pulling it from Docker Hub, download [Dockerfile](https://raw.githubusercontent.com/granek/OrthoMCL-docker/master/Dockerfile) (or pull this repo), then run ~docker build -t orthomcl~ within the directory containing Dockerfile.

# To "exit" (technically this is detaching) from your orthomcl session in a way that lets you easily resume, use the escape sequence ~Ctrl-p~ + ~Ctrl-q~. This leaves the container running.  To resume your orthomcl session


# ** Run analysis from manuscript
#    Both of these commands will output the results to the current directory.  The "subset" results are named ~subset_SRR1964709_results.csv~, the "full" results are named ~SRR1964709_results.csv~.   An error such as "Are you trying to connect to a TLS-enabled daemon without TLS?", may indicate that docker has not been started.
   
#    - ~docker run -v $PWD:/root/aimhii/example_analysis/results -t granek/aimhii make run_subset~ to do a test analysis on a subset of the data
#    - ~docker run -v $PWD:/root/aimhii/example_analysis/results -t granek/aimhii make run_aimhii~ to perform the full analysis from the manuscript.
# ** Quick Start to analyze your own data: 
# Running ~aimhii~ from a Docker container requires one step in addition to what you would normally do if it was installed directly on your computer: you have to tell docker where to find the input files, and where to put the results.  This is done with the "-v" option to ~docker run~.  See the below, or the [[https://docs.docker.com/reference/commandline/cli/#run][Docker documentation]] for details on the "-v".

# The simplest way to run aimhii on your own data is:

# 1. Put all the input files in one directory, for example a directory called ~my_data~
# 2. Move into that directory with the command ~cd my_data~.
# 3. Run the following command where you substitute the names of your files for the capitalized words:
#    #+BEGIN_SRC sh
# docker run -v `pwd`:`pwd` -w `pwd` -t granek/aimhii aimhii \
# GENOME INSERT ADAPTER FASTQ1 FASTQ2 \
# --outfile results.csv --plot readplot
#    #+END_SRC

# For details about the input files to ~aimhii~, and options see [[running_aimhii.org][Running AIMHII]].

# The ~--outfile results.csv~ part of the command tells aimhii to save the results table to a file named ~results.csv~, which will be generated in the current directory (you should NOT create this file).
# The ~--plot readplot~ part of the command tells aimhii to generate a read plot for each cluster identified, named with the prefix "readplot", and saved to the current directory (you should NOT create this file).
# *** Subdirectories
# If some of the input files are in a directory within the current directory, then you only need to modify the above command by giving the relative path.  For example, if your fastq file named "reads.fastq.gz" is in the "data" subdirectory within the current directory, you will need to refer to it as ~data/reads.fastq.gz~ in the ~docker run~ command.

#    A similar command will work if the input files are in the current directory, or directories within the current directory.  For example if the FASTQ files are in a subdirectory named ~fastq_dir~
# *** aimhii help
# The following will print the "help" information for aimhii, giving details of additional commandline options.
#    #+BEGIN_SRC sh
# docker run -t granek/aimhii aimhii -h 
#    #+END_SRC
# ** Advanced: Access shell in AIMHII docker container
# You can use the following command to start a shell within the aimhii container.
#    #+BEGIN_SRC sh
#    docker run -i -t granek/aimhii /bin/bash
#    #+END_SRC
# # ** aimhii call structure					   :noexport:
